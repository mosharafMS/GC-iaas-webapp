{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "environmentName": {
      "type": "string",
      "defaultValue": "AzureCloud",
      "metadata": {
        "description": "Assign the environment for Azure (Azure Commercial or Gov)"
      }
    },
    "omsWorkspaceRegion": {
      "type": "string"
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Name of key vault used to store encrypted values for deployment. This key vault is created during predeployment steps."
      }
    },
    "keyVaultResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the resource group that holds the key vault above"
      }
    },
    "domainName": {
      "type": "string",
      "defaultValue": "contoso.local",
      "metadata": {
        "description": "Name of domain"
      }
    },
    "configureSQLAO": {
      "type": "string",
      "defaultValue": "yes",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Choose to skip SQL Always On configuration"
      }
    },
    "environmentPrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix for environement (production or staging). You can change the allowed values based on your preference."
      },
      "defaultValue": ""
    },
    "numberOfWebInstances": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 2,
      "maxValue": 5
    },
    "useExistingKek": {
      "type": "string",
      "defaultValue": "kek",
      "allowedValues": [
        "nokek",
        "kek"
      ],
      "metadata": {
        "description": "Select kek if the secret should be encrypted with a key encryption key and pass explicit keyEncryptionKeyURL. For nokek, you can keep keyEncryptionKeyURL empty."
      }
    },
    "encryptionEnabled": {
      "type": "bool",
      "defaultValue": true
    },
    "adVMSize": {
      "type": "string",
      "allowedValues": [
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS4",
        "Standard_GS5"
      ],
      "metadata": {
        "description": "The size of the AD VMs Created"
      },
      "defaultValue": "Standard_D1_v2"
    },
    "sqlVMSize": {
      "type": "string",
      "allowedValues": [
        "Standard_D2_v2",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_D2_v2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS4",
        "Standard_GS5"
      ],
      "metadata": {
        "description": "The size of the SQL VMs Created"
      },
      "defaultValue": "Standard_D2_v2"
    },
    "webVMSize": {
      "type": "string",
      "allowedValues": [
        "Standard_D2_v2",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_D2_v2",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS4",
        "Standard_GS5"
      ],
      "metadata": {
        "description": "The size of the SQL VMs Created"
      },
      "defaultValue": "Standard_D2_v2"
    },
    "mgtVMSize": {
      "type": "string",
      "allowedValues": [
        "Standard_D2_v2",
        "Standard_DS1",
        "Standard_D1_v2",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS4",
        "Standard_GS5"
      ],
      "metadata": {
        "description": "The size of the SQL VMs Created"
      },
      "defaultValue": "Standard_D1_v2"
    },
    "witnessVMSize": {
      "type": "string",
      "allowedValues": [
        "Standard_D2_v2",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_D1_v2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS4",
        "Standard_GS5"
      ],
      "metadata": {
        "description": "The size of the SQL Witness VM Created"
      },
      "defaultValue": "Standard_D1_v2"
    },
    "sqlStorageAccountType": {
      "type": "string",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "Standard_GRS"
      ],
      "metadata": {
        "description": "The type of the Sql Server Storage Account created"
      },
      "defaultValue": "Standard_GRS"
    },
    "dcStorageAccountType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "The type of the DC Storage Account created"
      },
      "defaultValue": "Standard_GRS"
    },
    "webStorageAccountType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "The type of the DC Storage Account created"
      },
      "defaultValue": "Standard_GRS"
    },
    "mgtStorageAccountType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "The type of the DC Storage Account created"
      },
      "defaultValue": "Standard_GRS"
    },
    "templatesBaseUrl": {
      "type": "string",
      "metadata": {
        "description": "Linked Templates base url"
      },
      "defaultValue": "https://raw.githubusercontent.com/mosharafMS/GC-iaas-webapp/master/nestedtemplates/nestedtemplates"
    },
    "dscBaseUrl": {
      "type": "string",
      "metadata": {
        "description": "DSC Scripts base url"
      },
      "defaultValue": "https://raw.githubusercontent.com/mosharafMS/GC-iaas-webapp/master/DSC"
    },
    "scriptsBaseUrl": {
      "type": "string",
      "metadata": {
        "description": "DSC Scripts base url"
      },

      "defaultValue": "https://raw.githubusercontent.com/mosharafMS/GC-iaas-webapp/master/custom-scripts"
    },
    "sqlServerVersion": {
      "type": "string",
      "allowedValues": [
        "SQL2016-WS2012R2"
      ],
      "metadata": {
        "description": "The Sql Server Version"
      },
      "defaultValue": "SQL2016-WS2012R2"
    },
    "gatewaySkuName": {
      "type": "string",
      "defaultValue": "WAF_Medium",
      "allowedValues": [
        "Standard_Small",
        "WAF_Medium",
        "WAF_Large"
      ]
    }
  },
  "variables": {
    "appID": "aadClientID",
    "appSecret": "aadClientSecret",
    "lbSettings": {
      "rdpLBFEName": "rdpLBFE",
      "sqlLBFEName": "sqlLBFE",
      "adLBBEName": "adLBBE",
      "sqlLBBEName": "sqlLBBE",
      "rdpLBName": "rdpLoadBalancer",
      "sqlLBName": "sqlLoadBalancer",
      "ipAddress": "10.200.1.5"
    },
    "wafSettings": {
      "wafMode": "Prevention",
      "wafRuleSetType": "OWASP",
      "wafRuleSetVersion": "3.0",
      "wafEnabled": true
    },
    "numberOfWebInstances": "[length(variables('vmSettings').web.ipAddresses)]",
    "staticIPWEBStart": 5,
    "RDPNAT": "RDP",
    "SQLAOProbe": "SQLAlwaysOnEndPointProbe",
    "omsSettings": {
      "omsWorkspaceRegion": "[parameters('omsWorkspaceRegion')]",
      "serviceTier": "PerNode",
      "dataRetention": 365
    },
    "vmSettings": {
      "location": "[resourceGroup().location]",
      "dc": {
        "imagePublisher": "MicrosoftWindowsServer",
        "imageOffer": "WindowsServer",
        "imageSKU": "2016-Datacenter",
        "ipAddressPDC": "10.200.0.5",
        "ipAddressBDC": "10.200.0.6"
      },
      "sql": {
        "imagePublisher": "MicrosoftSQLServer",
        "imageOffer": "[parameters('sqlServerVersion')]",
        "imageSKU": "Enterprise",
        "autoPatchingEnable": true,
        "autoPatchingDay": "Sunday",
        "autoPatchingStartHour": "2",
        "sqlAOListenerPort": "1433",
        "sqlAOAGName": "alwayson-ag",
        "workloadType": "GENERAL",
        "sqlAOListenerName": "alwayson-ag-listener",
        "sqlAOEPName": "[concat(variables('resourceNames').alwaysOnDnsPrefix,'-hadr')]",
        "sharePath": "[concat(variables('resourceNames').alwaysOnDnsPrefix,'-fsw')]",
        "clusterName": "[concat(variables('resourceNames').alwaysOnDnsPrefix,'-fc')]",
        "sqlAutobackupRetentionPeriod": "2",
        "numberOfDisks": "2",
        "ipAddressSql0": "10.200.1.6",
        "ipAddressSql1": "10.200.1.7",
        "serviceAccountUsername": "sqlservice"
      },
      "sqlw": {
        "imagePublisher": "MicrosoftWindowsServer",
        "imageOffer": "WindowsServer",
        "imageSKU": "2016-Datacenter",
        "ipAddress": "10.200.1.8"
      },
      "web": {
        "imagePublisher": "MicrosoftWindowsServer",
        "imageOffer": "WindowsServer",
        "imageSKU": "2016-Datacenter",
        "staticIPWEBStart": 5,
        "ipAddresses": [
          { "IpAddress": "10.200.2.5" },
          { "IpAddress": "10.200.2.6" }
        ]
      },
      "mgt": {
        "imagePublisher": "MicrosoftWindowsServer",
        "imageOffer": "WindowsServer",
        "imageSKU": "2016-Datacenter",
        "ipAddress": "10.200.3.5"
      },
      "vmContainerName": "vhds"
    },
    "VnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkNameWithSuffix'))]",
    "derivedIds": {
      "keyVaultUrl": "[concat('https://', parameters('keyVaultName') ,'.vault.azure.net/')]",
      "keyVaultId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('keyVaultResourceGroupName'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]",
      "dcSubnet": "[concat(variables('VnetID'),'/subnets/', variables('subnets').dc.name)]",
      "sqlSubnet": "[concat(variables('VnetID'),'/subnets/', variables('subnets').sql.name)]",
      "webSubnet": "[concat(variables('VnetID'),'/subnets/', variables('subnets').web.name)]",
      "mgtSubnet": "[concat(variables('VnetID'),'/subnets/', variables('subnets').mgt.name)]",
      "dcNSG": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNames').nsgs.dc)]",
      "sqlNSG": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNames').nsgs.sql)]",
      "webNSG": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNames').nsgs.web)]",
      "lbNSG": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNames').nsgs.lb)]",
      "mgtNSG": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNames').nsgs.mgt)]",
      "adIPConfigID": "[concat(resourceId('Microsoft.Network/networkInterfaces',variables('resourceNames').nics.adpdc),'/ipConfigurations/ipconfig1')]",
      "rdplbFEConfigID": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('lbSettings').rdpLBName),'/frontendIPConfigurations/',variables('lbSettings').rdpLBFEName)]",
      "adRDPNATRuleID": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('lbSettings').rdpLBName),'/inboundNatRules/',variables('RDPNAT'))]",
      "adBEAddressPoolID": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('lbSettings').rdpLBName),'/backendAddressPools/',variables('lbSettings').adLBBEName)]",
      "sqlBEAddressPoolID": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('lbSettings').sqlLBName),'/backendAddressPools/',variables('lbSettings').sqlLBBEName)]",
      "sqllbFEConfigID": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('lbSettings').sqlLBName),'/frontendIPConfigurations/',variables('lbSettings').sqlLBFEName)]",
      "sqllbProbeID": "[concat(resourceId('Microsoft.Network/loadBalancers',variables('lbSettings').sqlLBName),'/probes/',variables('SQLAOProbe'))]"
    },
    "subnets": {
      "sql": {
        "name": "sql",
        "properties": {
          "addressPrefix": "10.200.1.0/24",
          "serviceEndpoints": [
            {
              "service": "Microsoft.Storage"
            }
          ]
        }
      },
      "dc": {
        "name": "dc",
        "properties": {
          "addressPrefix": "10.200.0.0/24",
          "serviceEndpoints": [
            {
              "service": "Microsoft.Storage"
            }
          ]
        }
      },
      "web": {
        "name": "web",
        "properties": {
          "addressPrefix": "10.200.2.0/24",
          "serviceEndpoints": [
            {
              "service": "Microsoft.Storage"
            }
          ]
        }
      },
      "mgt": {
        "name": "mgt",
        "properties": {
          "addressPrefix": "10.200.3.0/24",
          "serviceEndpoints": [
            {
              "service": "Microsoft.Storage"
            }
          ]
        }
      },
      "appGateway": {
        "name": "appgateway",
        "properties": {
          "addressPrefix": "10.200.4.0/24",
          "serviceEndpoints": [
            {
              "service": "Microsoft.Storage"
            }
          ]
        }
      }
    },
    "subnetArray": [
      "[variables('subnets').sql]",
      "[variables('subnets').dc]",
      "[variables('subnets').web]",
      "[variables('subnets').mgt]",
      "[variables('subnets').appGateway]"
    ],
    "virtualNetworkAddressRange": "10.200.0.0/16",
    "virtualNetworkNameWithSuffix": "[concat('autohav2VNET', uniqueString(resourceGroup().id))]",
    "resourceNames": {
      "alwaysOnDnsPrefix": "aodns",
      "gatewaySkuName": "WAF_Medium",
      "omsWorkspace": "[substring(concat(uniqueString(resourceGroup().id), 'ws', parameters('environmentPrefix')), 5)]",
      "automationAccount": "[substring(concat(uniqueString(resourceGroup().id), 'aa', parameters('environmentPrefix')), 5)]",
      "recoveryServicesVault": "AZ-RCV-01",
      "automationSchedule": "VM-Patching-Schedule",
      "virtualNetworkNameWithSuffix": "[concat('autohav2VNET', uniqueString(resourceGroup().id))]",
      "nsgs": {
        "mgt": "[concat('MGTNSG', parameters('environmentPrefix'))]",
        "dc": "[concat('DCNSG', parameters('environmentPrefix'))]",
        "web": "[concat('WEBNSG', parameters('environmentPrefix'))]",
        "sql": "[concat('SQLNSG', parameters('environmentPrefix'))]",
        "lb": "[concat('LBNSG', parameters('environmentPrefix'))]"
      },
      "storageAccounts": {
        "sql": "[concat(uniqueString(resourceGroup().id), 'sql', parameters('environmentPrefix'))]",
        "dc": "[concat(uniqueString(resourceGroup().id), 'dc', parameters('environmentPrefix'))]",
        "web": "[concat(uniqueString(resourceGroup().id), 'web', parameters('environmentPrefix'))]",
        "mgt": "[concat(uniqueString(resourceGroup().id), 'mgt', parameters('environmentPrefix'))]"
      },
      "vms": {
        "adpdc": "[concat('AZ-PDC-VM', parameters('environmentPrefix'))]",
        "adbdc": "[concat('AZ-BDC-VM', parameters('environmentPrefix'))]",
        "sql0": "[concat('sqlserver0', parameters('environmentPrefix'))]",
        "sql1": "[concat('sqlserver1', parameters('environmentPrefix'))]",
        "sqlw": "[concat('cluster-fsw', parameters('environmentPrefix'))]",
        "web": "[concat('AZ-WEB-VM', parameters('environmentPrefix'))]",
        "mgt": "[concat('AZ-MGT-VM', parameters('environmentPrefix'))]"
      },
      "nics": {
        "adpdc": "[concat('adPDC-nic', parameters('environmentPrefix'))]",
        "adbdc": "[concat('adBDC-nic', parameters('environmentPrefix'))]",
        "sqlw": "[concat('sqlw-nic', parameters('environmentPrefix'))]",
        "sql0": "[concat('sql0-nic', parameters('environmentPrefix'))]",
        "sql1": "[concat('sql1-nic', parameters('environmentPrefix'))]",
        "web": "[concat('WEB-nic', parameters('environmentPrefix'))]",
        "mgt": "[concat('MGT-nic', parameters('environmentPrefix'))]"
      },
      "loadBalancers": {
        "rdpLBFEName": "rdpLBFE",
        "sqlLBFEName": "sqlLBFE",
        "adLBBEName": "adLBBE",
        "sqlLBBEName": "sqlLBBE",
        "rdpLBName": "rdpLoadBalancer",
        "sqlLBName": "sqlLoadBalancer"
      },
      "availabilitySets": {
        "sql": "[concat('sqlAvailabilitySet', parameters('environmentPrefix'))]",
        "ad": "[concat('adAvailabilitySet', parameters('environmentPrefix'))]",
        "web": "[concat('webAvailabilitySet', parameters('environmentPrefix'))]"
      },
      "publicIPs": {
        "mgt": "mgtpublicip"
      }
    },
    "artifacts": {
      "provisioningHybridworkerUrl": "[concat(parameters('scriptsBaseUrl'),'/provisioningHybridworkers.ps1')]",
      "provisioningStorageAccountsUrl": "[concat(parameters('templatesBaseUrl'),'/storageAccounts.json')]",
      "provisioningVirtualMachinesUrl": "[concat(parameters('templatesBaseUrl'),'/virtualMachines.json')]",
      "provisioningAvailabilitySetsUrl": "[concat(parameters('templatesBaseUrl'),'/availabilitySets.json')]",
      "customScriptBaselineUrl": "[concat(parameters('scriptsBaseUrl'),'/customScriptBaseline.ps1')]",
      "secondarySqlCustomCMDUrl": "[concat(parameters('scriptsBaseUrl'),'/SQL0CustomCMD.sql')]",
      "provisioningCustomScriptExtensionUrl": "[concat(parameters('templatesBaseUrl'),'/customScriptExtension.json')]",
      "provisioningOMSWorkspaceUrl": "[concat(parameters('templatesBaseUrl'),'/provisioningAutoAccOMSWorkspace.json')]",
      "provisioningOMSAutomationScheduleUrl": "[concat(parameters('templatesBaseUrl'),'/provisioningAutomationSchedule.json')]",
      "vnetwithDNSTemplateURL": "[concat(parameters('templatesBaseUrl'),'/updateVnetWithDNS.json')]",
      "nicTemplateURL": "[concat(parameters('templatesBaseUrl'),'/updateNic.json')]",
      "sqlLoadBalancerURL": "[concat(parameters('templatesBaseUrl'),'/sqlLoadBalancer.json')]",
      "applicationGatewayURL": "[concat(parameters('templatesBaseUrl'),'/provisioningApplicationGateway.json')]",
      "provisioningNetworkInterfacesUrl": "[concat(parameters('templatesBaseUrl'),'/networkInterfaces.json')]",
      "virtualNetworkNSGURL": "[concat(parameters('templatesBaseUrl'),'/virtualNetworkNSG.json')]",
      "provisionAndConfigureADUrl": "[concat(parameters('templatesBaseUrl'),'/provisionAndConfigureAD.json')]",
      "provisionAndConfigureADUrlBackups": "[concat(parameters('templatesBaseUrl'),'/provisionAndConfigureADBackups.json')]",
      "provisionAndConfigureADUrlEncryption": "[concat(parameters('templatesBaseUrl'),'/provisionAndConfigureADEncryption.json')]",
      "configureMGTUrl": "[concat(parameters('templatesBaseUrl'),'/configureMGT.json')]",
      "configureWEBUrl": "[concat(parameters('templatesBaseUrl'),'/configureWEB.json')]",
      "configureSQLUrl": "[concat(parameters('templatesBaseUrl'),'/configureSQL.json')]",
      "provisioningRCV": "[concat(parameters('templatesBaseUrl'),'/recoveryServicesVault.json')]",
      "backupVMProtectedItem": "[concat(parameters('templatesBaseUrl'),'/backupProtectedItems.json')]",
      "backupPolicy": "[concat(parameters('templatesBaseUrl'),'/recoveryServicesBackupPolicy.json')]",
      "configuringBackupADVMURL": "[concat(parameters('templatesBaseUrl'),'/configuringBackupADVM.json')]",
      "preparingSQLAOUrl": "[concat(parameters('templatesBaseUrl'),'/preparingSQLAO.json')]",
      "preparingAlwaysOnSqlServerURLAObypass": "[concat(parameters('templatesBaseUrl'),'/preparingSqlServerAObypass.json')]",
      "configuringAlwaysOnURL": "[concat(parameters('templatesBaseUrl'),'/configuringAlwaysOn.json')]",
      "configuringAlwaysOnURLAObypass": "[concat(parameters('templatesBaseUrl'),'/configuringAlwaysOnAObypass.json')]",
      "provisioningOMSMonitoringUrl": "[concat(parameters('templatesBaseUrl'), '/provisioningOMSMonitoring.json') ]",
      "pdcModulesURL": "[concat(parameters('dscBaseUrl'),'/PDCBaselineDSC.ps1.zip')]",
      "pdcConfigurationFunction": "PDCBaselineDSC.ps1\\PDCBaselineDSC",
      "bdcModulesURL": "[concat(parameters('dscBaseUrl'),'/BDCBaselineDSC.ps1.zip')]",
      "bdcConfigurationFunction": "BDCBaselineDSC.ps1\\BDCBaselineDSC",
      "sqlwModulesURL": "[concat(parameters('dscBaseUrl'),'/SQLWBaselineDSC.ps1.zip')]",
      "sqlwConfigurationFunction": "SQLWBaselineDSC.ps1\\SQLWBaselineDSC",
      "sql0ModulesURL": "[concat(parameters('dscBaseUrl'),'/SQL0BaselineDSC.ps1.zip')]",
      "sql0ConfigurationFunction": "SQL0BaselineDSC.ps1\\SQL0BaselineDSC",
      "sql1ModulesURL": "[concat(parameters('dscBaseUrl'),'/SQL1BaselineDSC.ps1.zip')]",
      "sql1ConfigurationFunction": "SQL1BaselineDSC.ps1\\SQL1BaselineDSC",
      "webModulesURL": "[concat(parameters('dscBaseUrl'),'/WEBBaselineDSC.ps1.zip')]",
      "webConfigurationFunction": "WEBBaselineDSC.ps1\\WEBBaselineDSC",
      "mgtModulesURL": "[concat(parameters('dscBaseUrl'),'/MGTBaselineDSC.ps1.zip')]",
      "mgtConfigurationFunction": "MGTBaselineDSC.ps1\\MGTBaselineDSC"
    },
    "prepareAlwaysOnSQLInfo": {
      "artifacts": "[variables('artifacts')]",
      "resourceNames": "[variables('resourceNames')]",
      "derivedIds": "[variables('derivedIds')]",
      "vmSettings": "[variables('vmSettings')]",
      "sqlServerServiceAccountUserName": "[variables('vmSettings').sql.serviceAccountUsername]",
      "numberOfSqlVMDisks": "[variables('vmSettings').sql.numberOfDisks]"
    },
    "configuringAlwaysOnInfo": {
      "lbSettings": "[variables('lbSettings')]",
      "sqlLBIPAddress": "[variables('lbSettings').ipAddress]"
    },
    "backupInfo": {
      "rcVaultName": "[variables('resourceNames').recoveryServicesVault]",
      "backupPolicy": "CustomPolicy",
      "backupTemplateUrl": "[variables('artifacts').backupVMProtectedItem]",
      "backupPolicyTemplateUrl": "[variables('artifacts').backupPolicy]",
      "backupScheduleRunTimes": [ "2017-05-09T23:00:00" ],
      "backupDailyRetentionDurationCount": 30,
      "backupDaysOfTheWeek": [ "Sunday" ],
      "backupWeeklyRetentionDurationCount": 104,
      "backupMonthlyRetentionDurationCount": 36,
      "backupMonthsOfYear": [ "January" ],
      "backupYearlyRetentionDurationCount": 5
    },
    "vmEncryptionSettings": {
      "sequenceVersion": "1.0",
      "volumeType": "All",
      "diskEncryptionExtensionName": "AzureDiskEncryption",
      "diskEncryptionExtensionVersion": "1.1",
      "encryptionOperation": "EnableEncryption",
      "keyEncryptionAlgorithm": "RSA-OAEP",
      "keyVaultURL": "[concat('https://', parameters('keyVaultName'), '.vault.azure.net/')]",
      "provisioningVMAzureDiskEncryptionUrl": "[concat(parameters('templatesBaseUrl'),'/configuringVMAzureDiskEncryption-', parameters('useExistingKek'),'.json')]",
      "keyVaultId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('keyVaultResourceGroupName'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]",
      "keyVaultResourceID": "[concat(subscription().id,'/resourceGroups/',parameters('keyVaultResourceGroupName'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
    },
    "antimalwareInfo": {
      "exclusionPath": {
        "web": [ "c:\\Users" ],
        "sql": [ "c:\\Users" ],
        "sqlWS2012": "c:\\Users",
        "ad": [ "c:\\Users" ],
        "mgt": [ "c:\\Users\\adminuser" ]
      },
      "exclusionExtension": {
        "web": [ ".txt", ".ps1" ],
        "sql": [ ".txt", ".ps1" ],
        "sqlWS2012": ".txt;.ps1",
        "ad": [ ".txt", ".ps1" ],
        "mgt": [ ".txt" ]
      },
      "exclusionProcess": {
        "web": [ "w3wp.exe", "explorer.exe" ],
        "sql": [ "w3wp.exe", "explorer.exe" ],
        "sqlWS2012": "w3wp.exe;explorer.exe",
        "ad": [ "w3wp.exe", "explorer.exe" ],
        "mgt": [ "explorer.exe" ]
      },
      "realTimeScanDirection": "Both",
      "remediationScheduleDay": "Everyday",
      "scanScheduleDay": "Everyday",
      "disableRealtimeMonitoring": false
    },
    "vmNamesArray": {
      "VMs": [
        {
          "Name": "[variables('resourceNames').vms.adpdc]"
        },
        {
          "Name": "[variables('resourceNames').vms.adbdc]"
        },
        {
          "Name": "[variables('resourceNames').vms.mgt]"
        },
        {
          "Name": "[variables('resourceNames').vms.sqlw]"
        },
        {
          "Name": "[variables('resourceNames').vms.sql0]"
        },
        {
          "Name": "[variables('resourceNames').vms.sql1]"
        }
      ]
    }
  },
  "resources": [
    {
      "name": "ConfigureMGT",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "comments": "Configures MGT VM with custom settings",
      "dependsOn": [
              ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('artifacts').configureMGTUrl]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "mgtVMName": {
            "value": "[variables('resourceNames').vms.mgt]"
          },
          "location": {
            "value": "[variables('vmSettings').location]"
          },
          "domainName": {
            "reference": {
              "keyVault": {
                "id": "[variables('derivedIds').keyVaultId]"
              },
              "secretName": "domain"
            }
          },
          "adminUsername": {
            "reference": {
              "keyVault": {
                "id": "[variables('derivedIds').keyVaultId]"
              },
              "secretName": "adminUsername"
            }
          },
          "adminPassword": {
            "reference": {
              "keyVault": {
                "id": "[variables('derivedIds').keyVaultId]"
              },
              "secretName": "adminPassword"
            }
          },
          "mgtModulesURL": {
            "value": "[variables('artifacts').mgtModulesURL]"
          },
          "antimalwareInfo": {
            "value": "[variables('antimalwareInfo')]"
          },
          "mgtConfigurationFunction": {
            "value": "[variables('artifacts').mgtConfigurationFunction]"
          },
          "vmEncryptionSettings": {
            "value": "[variables('vmEncryptionSettings')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "workspaceName": {
            "value": "[variables('resourceNames').omsWorkspace]"
          },
          "AutomationAccountName": {
            "value": "[variables('resourceNames').automationAccount]"
          },
          "EnvironmentName": {
            "value": "[parameters('EnvironmentName')]"
          },
          "ResourceGroupName": {
            "value": "[resourceGroup().name]"
          },
          "SubscriptionId": {
            "value": "[subscription().subscriptionId]"
          },
          "backupInfo": {
            "value": "[variables('backupInfo')]"
          },
          "provisioningHybridworkersUrl": {
            "value": "[variables('artifacts').provisioningHybridworkerUrl]"
          }
        }
      }
    },
    {
      "name": "ConfigureSQL",
      "comments": "Configures SQL VM with custom settings including SQL Always On Availability Groups",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
      
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('artifacts').configureSQLUrl]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "adPDCVMName": {
            "value": "[variables('resourceNames').vms.adpdc]"
          },
          "adminUsername": {
            "reference": {
              "keyVault": {
                "id": "[variables('derivedIds').keyVaultId]"
              },
              "secretName": "adminUsername"
            }
          },
          "adminPassword": {
            "reference": {
              "keyVault": {
                "id": "[variables('derivedIds').keyVaultId]"
              },
              "secretName": "adminPassword"
            }
          },
          "adBDCVMName": {
            "value": "[variables('resourceNames').vms.adbdc]"
          },
          "sql0VMName": {
            "value": "[variables('resourceNames').vms.sql0]"
          },
          "sql1VMName": {
            "value": "[variables('resourceNames').vms.sql1]"
          },
          "location": {
            "value": "[variables('vmSettings').location]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "sqlwVMName": {
            "value": "[variables('resourceNames').vms.sqlw]"
          },
          "sqlwNicName": {
            "value": "[variables('resourceNames').nics.sqlw]"
          },
          "sql0NicName": {
            "value": "[variables('resourceNames').nics.sql0]"
          },
          "sql1NicName": {
            "value": "[variables('resourceNames').nics.sql1]"
          },
          "adPDCNICIPAddress": {
            "value": "[variables('vmSettings').dc.ipAddressPDC]"
          },
          "adBDCNICIPAddress": {
            "value": "[variables('vmSettings').dc.ipAddressBDC]"
          },
          "updateNicTemplateURL": {
            "value": "[variables('artifacts').nicTemplateURL]"
          },
          "sqlSubnetRef": {
            "value": "[variables('derivedIds').sqlSubnet]"
          },
          "sqlBEAddressPoolID": {
            "value": "[variables('derivedIds').sqlBEAddressPoolID]"
          },
          "prepareAlwaysOnSQLInfo": {
            "value": "[variables('prepareAlwaysOnSQLInfo')]"
          },
          "configuringAlwaysOnInfo": {
            "value": "[variables('configuringAlwaysOnInfo')]"
          },
          "backupInfo": {
            "value": "[variables('backupInfo')]"
          },
          "antimalwareInfo": {
            "value": "[variables('antimalwareInfo')]"
          },
          "AutomationAccountName": {
            "value": "[variables('resourceNames').automationAccount]"
          },
          "EnvironmentName": {
            "value": "[parameters('EnvironmentName')]"
          },
          "ResourceGroupName": {
            "value": "[resourceGroup().name]"
          },
          "SubscriptionId": {
            "value": "[subscription().subscriptionId]"
          },
          "vmEncryptionSettings": {
            "value": "[variables('vmEncryptionSettings')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "provisioningHybridworkersUrl": {
            "value": "[variables('artifacts').provisioningHybridworkerUrl]"
          },
          "configureSQLAO": {
            "value": "[parameters('configureSQLAO')]"
          },
          "workspaceName": {
            "value": "[variables('resourceNames').omsWorkspace]"
          }

        }
      }
    },
    {
      "name": "ConfigureWEB",
      "comments": "Configures WEB VM with custom settings",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
       
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('artifacts').configureWEBUrl]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "numberOfWebInstances": {
            "value": "[variables('numberOfWebInstances')]"
          },
          "WebVMName": {
            "value": "[variables('resourceNames').vms.web]"
          },
          "WebAvailabilitySetName": {
            "value": "[variables('resourceNames').availabilitySets.web]"
          },
          "WebStorageAccountName": {
            "value": "[variables('resourceNames').storageAccounts.web]"
          },
          "webStorageAccountType": {
            "value": "[parameters('webStorageAccountType')]"
          },
          "location": {
            "value": "[variables('vmSettings').location]"
          },
          "WebVMSize": {
            "value": "[parameters('webVMSize')]"
          },
          "adminUsername": {
            "reference": {
              "keyVault": {
                "id": "[variables('derivedIds').keyVaultId]"
              },
              "secretName": "adminUsername"
            }
          },
          "adminPassword": {
            "reference": {
              "keyVault": {
                "id": "[variables('derivedIds').keyVaultId]"
              },
              "secretName": "adminPassword"
            }
          },
          "appImagePublisher": {
            "value": "[variables('vmSettings').web.imagePublisher]"
          },
          "appImageOffer": {
            "value": "[variables('vmSettings').web.imageOffer]"
          },
          "appImageSKU": {
            "value": "[variables('vmSettings').web.imageSKU]"
          },
          "vmContainerName": {
            "value": "[variables('vmSettings').vmContainerName]"
          },
          "WEBNICName": {
            "value": "[variables('resourceNames').nics.web]"
          },
          "subnetRef": {
            "value": "[variables('derivedIds').webSubnet]"
          },
          "webNSGid": {
            "value": "[variables('derivedIds').webNSG]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "webModulesURL": {
            "value": "[variables('artifacts').webModulesURL]"
          },
          "webConfigurationFunction": {
            "value": "[variables('artifacts').webConfigurationFunction]"
          },
          "staticIPWEBStart": {
            "value": "[variables('staticIPWEBStart')]"
          },
          "webSubnetAddressRange": {
            "value": "[variables('subnets').web.properties.addressPrefix]"
          },
          "backupInfo": {
            "value": "[variables('backupInfo')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "vmEncryptionSettings": {
            "value": "[variables('vmEncryptionSettings')]"
          },
          "antimalwareInfo": {
            "value": "[variables('antimalwareInfo')]"
          },
          "workspaceName": {
            "value": "[variables('resourceNames').omsWorkspace]"
          },
          "AutomationAccountName": {
            "value": "[variables('resourceNames').automationAccount]"
          },
          "EnvironmentName": {
            "value": "[parameters('EnvironmentName')]"
          },
          "SubscriptionId": {
            "value": "[subscription().subscriptionId]"
          },
          "ResourceGroupName": {
            "value": "[resourceGroup().name]"
          },
          "provisioningHybridworkersUrl": {
            "value": "[variables('artifacts').provisioningHybridworkerUrl]"
          },
          "omsWorkspaceName": {
            "value": "[variables('resourceNames').omsWorkspace]"
          }
        }
      }
    },
    {
      "name": "[concat('ConfigureOMSMonitoringSQLADMGT-', variables('vmNamesArray').VMs[copyIndex()].Name)]",
      "comments": "Creates OMS Monitoring Extension for SQL, AD, and MGT",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "ConfigureSQL",
        "ConfigureWEB",
        "ConfigureMGT"
      ],
      "copy": {
        "name": "monitorVMLoopSQLAD",
        "count": "[length(variables('vmNamesArray').VMs)]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('artifacts').provisioningOMSMonitoringUrl]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmName": {
            "value": "[variables('vmNamesArray').VMs[copyIndex()].Name]"
          },
          "workspaceName": {
            "value": "[variables('resourceNames').omsWorkspace]"
          },
          "AutomationAccountName": {
            "value": "[variables('resourceNames').automationAccount]"
          },
          "EnvironmentName": {
            "value": "[parameters('EnvironmentName')]"
          },
          "SubscriptionId": {
            "value": "[subscription().subscriptionId]"
          },
          "ResourceGroupName": {
            "value": "[resourceGroup().name]"
          },
          "customScriptBaselineUrl": {
            "value": "[variables('artifacts').customScriptBaselineUrl]"
          },
          "MachinesToSetPasswordPolicy": {
            "value": "[concat(variables('resourceNames').vms.adpdc,';', variables('resourceNames').vms.adbdc)]"
          },
          "location": {
            "value": "[variables('vmSettings').location]"
          },
          "SQLPrimaryName": {
            "value": "[variables('resourceNames').vms.sql1]"
          },
          "SQLSecondaryName": {
            "value": "[variables('resourceNames').vms.sql0]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "AlwaysOnAvailabilityGroupName": {
            "value": "[variables('vmSettings').sql.sqlAOAGName]"
          },
          "secondarySqlCustomCMDUrl": {
            "value": "[variables('artifacts').secondarySqlCustomCMDUrl]"
          },
          "deploymentAppID": {
            "reference": {
              "keyVault": {
                "id": "[variables('derivedIds').keyVaultId]"
              },
              "secretName": "aadClientID"
            }
          },
          "deploymentAppSecret": {
            "reference": {
              "keyVault": {
                "id": "[variables('derivedIds').keyVaultId]"
              },
              "secretName": "aadClientSecret"
            }
          },
          "tenantID": {
            "reference": {
              "keyVault": {
                "id": "[variables('derivedIds').keyVaultId]"
              },
              "secretName": "aadTenantId"
            }
          }
        }
      }
    },
    {
      "name": "[concat('ConfigureOMSMonitoringWEB-', variables('resourceNames').vms.web, copyindex())]",
      "comments": "Creates OMS Monitoring Extension for WEB",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "ConfigureSQL",
        "ConfigureWEB",
        "ConfigureMGT"
      ],
      "copy": {
        "name": "monitorVMLoopWEB",
        "count": "[variables('numberOfWebInstances')]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('artifacts').provisioningOMSMonitoringUrl]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmName": {
            "value": "[concat(variables('resourceNames').vms.web, copyindex())]"
          },
          "workspaceName": {
            "value": "[variables('resourceNames').omsWorkspace]"
          },
          "AutomationAccountName": {
            "value": "[variables('resourceNames').automationAccount]"
          },
          "EnvironmentName": {
            "value": "[parameters('EnvironmentName')]"
          },
          "SubscriptionId": {
            "value": "[subscription().subscriptionId]"
          },
          "ResourceGroupName": {
            "value": "[resourceGroup().name]"
          },
          "customScriptBaselineUrl": {
            "value": "[variables('artifacts').customScriptBaselineUrl]"
          },
          "MachinesToSetPasswordPolicy": {
            "value": ""
          },
          "location": {
            "value": "[variables('vmSettings').location]"
          },
          "SQLPrimaryName": {
            "value": "[variables('resourceNames').vms.sql1]"
          },
          "SQLSecondaryName": {
            "value": "[variables('resourceNames').vms.sql0]"
          },
          "DomainName": {
            "value": "[parameters('domainName')]"
          },
          "AlwaysOnAvailabilityGroupName": {
            "value": "[variables('vmSettings').sql.sqlAOAGName]"
          },
          "secondarySqlCustomCMDUrl": {
            "value": "[variables('artifacts').secondarySqlCustomCMDUrl]"
          },
          "deploymentAppID": {
            "reference": {
              "keyVault": {
                "id": "[variables('derivedIds').keyVaultId]"
              },
              "secretName": "aadClientID"
            }
          },
          "deploymentAppSecret": {
            "reference": {
              "keyVault": {
                "id": "[variables('derivedIds').keyVaultId]"
              },
              "secretName": "aadClientSecret"
            }
          },
          "tenantID": {
            "reference": {
              "keyVault": {
                "id": "[variables('derivedIds').keyVaultId]"
              },
              "secretName": "aadTenantId"
            }
          }
        }
      }
    },
    {
      "name": "ConfigureAutomationSchedules",
      "comments": "Configures patching automation schedules",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "monitorVMLoopSQLAD",
        "monitorVMLoopWEB"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('artifacts').provisioningOMSAutomationScheduleUrl]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "omsAutomationAccountName": {
            "value": "[variables('resourceNames').automationAccount]"
          },
          "scheduleName": {
            "value": "[variables('resourceNames').automationSchedule]"
          },
          "scheduleJobGuid": {
            "reference": {
              "keyVault": {
                "id": "[variables('derivedIds').keyVaultId]"
              },
              "secretName": "guid"
            }
          },
          "computerIdList": {
            "value": ""
          }
        }
      }
    }
  ]
}
